     1                                  ;Write a program that takes a number x as input, and returns:
     2                                  ;   - 0 if x is even.
     3                                  ;   - 1 if x is odd. 
     4                                  
     5                                  BITS 32
     6                                  
     7                                  %include	'training.s' 
     8                              <1> BITS 32
     9                              <1> extern printf
    10                              <1> extern exit
    11                              <1> extern scanf
    12                              <1> extern read
    13                              <1> 
    14                              <1> section .data 
    15                              <1> 
    16                              <1> ;Formats for printf and strings needed throughout
    17 00000000 25780A00            <1> hex_new  db     "%x", 10, 0
    18 00000004 257800              <1> hex_     db "%x", 0
    19 00000007 256400              <1> dec_     db "%d", 0
    20 0000000A 25640A00            <1> dec_new  db     "%d", 10, 0
    21 0000000E 257300              <1> str_     db "%s", 0
    22 00000011 0A00                <1> new_     db "", 10, 0
    23 00000013 3D3D3D3D3D3D3D3D0A- <1> delim   db  "========",10,0
    24 0000001C 00                  <1>
    25                              <1> 
    26                              <1> section .text
    27                              <1> 
    28                              <1> print_ebx:
    29 00000000 60                  <1>     pushad
    30 00000001 53                  <1>     push    ebx
    31 00000002 68[00000000]        <1>     push    hex_new
    32 00000007 E8(00000000)        <1>     call    printf
    33 0000000C 83C408              <1>     add esp, 8
    34 0000000F 61                  <1>     popad
    35 00000010 C3                  <1>     ret
    36                              <1> 
    37                              <1> print_ebx_dec:
    38 00000011 60                  <1>     pushad
    39 00000012 53                  <1>     push    ebx
    40 00000013 68[0A000000]        <1>     push    dec_new
    41 00000018 E8(00000000)        <1>     call    printf
    42 0000001D 83C408              <1>     add esp, 8
    43 00000020 61                  <1>     popad
    44 00000021 C3                  <1>     ret
    45                              <1> 
    46                              <1> ;prints value in eax in hex saves all registers
    47                              <1> print_eax:
    48 00000022 60                  <1>     pushad
    49 00000023 50                  <1>     push    eax
    50 00000024 68[00000000]        <1>     push    hex_new
    51 00000029 E8(00000000)        <1>     call    printf
    52 0000002E 83C408              <1>     add esp, 8
    53 00000031 61                  <1>     popad
    54 00000032 C3                  <1>     ret
    55                              <1> 
    56                              <1> ;prints value in eax in hex saves all registers
    57                              <1> print_edx:
    58 00000033 60                  <1>     pushad
    59 00000034 52                  <1>     push    edx
    60 00000035 68[00000000]        <1>     push    hex_new
    61 0000003A E8(00000000)        <1>     call    printf
    62 0000003F 83C408              <1>     add esp, 8
    63 00000042 61                  <1>     popad
    64 00000043 C3                  <1>     ret
    65                              <1> 
    66                              <1> print_edi:
    67 00000044 60                  <1>     pushad
    68 00000045 57                  <1>     push    edi
    69 00000046 68[00000000]        <1>     push    hex_new
    70 0000004B E8(00000000)        <1>     call    printf
    71 00000050 83C408              <1>     add esp, 8
    72 00000053 61                  <1>     popad
    73 00000054 C3                  <1>     ret
    74                              <1>     
    75                              <1> ;prints value in eax in hex saves all registers
    76                              <1> print_eax_dec:
    77 00000055 60                  <1>     pushad
    78 00000056 50                  <1>     push    eax
    79 00000057 68[0A000000]        <1>     push    dec_new
    80 0000005C E8(00000000)        <1>     call    printf
    81 00000061 83C408              <1>     add esp, 8
    82 00000064 61                  <1>     popad
    83 00000065 C3                  <1>     ret
    84                              <1> 
    85                              <1> print_ecx:
    86 00000066 60                  <1>     pushad
    87 00000067 51                  <1>     push    ecx
    88 00000068 68[00000000]        <1>     push    hex_new
    89 0000006D E8(00000000)        <1>     call    printf
    90 00000072 83C408              <1>     add esp, 8
    91 00000075 61                  <1>     popad
    92 00000076 C3                  <1>     ret
    93                              <1> 
    94                              <1> ;prints line splitter saves all registers
    95                              <1> print_delimiter:
    96 00000077 60                  <1>     pushad
    97 00000078 B8[13000000]        <1>     mov eax, delim
    98 0000007D 50                  <1>     push    eax
    99 0000007E E8(00000000)        <1>     call    printf
   100 00000083 83C404              <1>     add esp,4
   101 00000086 61                  <1>     popad
   102 00000087 C3                  <1>     ret
   103                              <1> 
   104                              <1> ;read ecx bytes into edi null terminate it all registers saved 
   105                              <1> read_line:
   106 00000088 60                  <1>     pushad
   107 00000089 51                  <1>     push    ecx 
   108 0000008A 57                  <1>     push    edi 
   109 0000008B 6A00                <1>     push    0
   110 0000008D E8(00000000)        <1>     call    read
   111 00000092 83C40C              <1>     add esp, 12
   112 00000095 31D2                <1>     xor edx, edx
   113 00000097 C6040700            <1>     mov byte [edi+eax], 0
   114 0000009B 61                  <1>     popad
   115 0000009C C3                  <1>     ret
   116                              <1> 
   117                              <1> ; reads a hex value from stdin and stores it into eax ebx is not saved 
   118                              <1> read_hex:
   119 0000009D 55                  <1>     push    ebp
   120 0000009E 89E5                <1>     mov     ebp, esp
   121 000000A0 83EC04              <1>     sub     esp, 4
   122                              <1>     ; Keep important registers.
   123                              <1>     ; We can't use pusha here, because the result is inside eax.
   124 000000A3 53                  <1>     push    ebx
   125 000000A4 51                  <1>     push    ecx
   126 000000A5 52                  <1>     push    edx
   127                              <1> 
   128 000000A6 8D5DFC              <1>     lea     ebx, [ebp-4]
   129 000000A9 53                  <1>     push    ebx
   130 000000AA 68[04000000]        <1>     push    hex_
   131 000000AF E8(00000000)        <1>     call    scanf
   132 000000B4 83C408              <1>     add     esp, 8
   133 000000B7 8B03                <1>     mov     eax, [ebx]
   134                              <1> 
   135                              <1>     ; Restore registers:
   136 000000B9 5A                  <1>     pop     edx
   137 000000BA 59                  <1>     pop     ecx
   138 000000BB 5B                  <1>     pop     ebx
   139 000000BC C9                  <1>     leave
   140 000000BD C3                  <1>     ret
   141                              <1> 
   142                              <1> ; reads a hex value from stdin and stores it into eax ebx is not saved 
   143                              <1> read_dec:
   144 000000BE 55                  <1>     push    ebp
   145 000000BF 89E5                <1>     mov ebp, esp
   146 000000C1 83EC04              <1>     sub esp, 4
   147 000000C4 8D5DFC              <1>     lea ebx, [ebp-4]
   148 000000C7 60                  <1>     pusha
   149 000000C8 53                  <1>     push    ebx
   150 000000C9 68[07000000]        <1>     push    dec_
   151 000000CE E8(00000000)        <1>     call    scanf
   152 000000D3 83C408              <1>     add esp, 8
   153 000000D6 61                  <1>     popa
   154 000000D7 8B03                <1>     mov eax, [ebx]
   155 000000D9 C9                  <1>     leave
   156 000000DA C3                  <1>     ret
   157                              <1> 
   158                              <1> ;prints string pointed to by esi saves all registers
   159                              <1> print_str:
   160 000000DB 60                  <1>     pushad
   161 000000DC 56                  <1>     push    esi
   162 000000DD E8(00000000)        <1>     call    printf
   163 000000E2 83C404              <1>     add esp, 4
   164 000000E5 61                  <1>     popad
   165 000000E6 C3                  <1>     ret
   166                              <1> 
   167                              <1> ;prints eax in binary
   168                              <1> print_eax_binary:
   169 000000E7 60                  <1>     pushad
   170 000000E8 B920000000          <1>     mov ecx,32 ; We print 32 digits.
   171                              <1> 
   172                              <1> .print_digit:
   173 000000ED D1C0                <1>         rol eax,1
   174 000000EF 89C2                <1>         mov edx,eax
   175 000000F1 83E201              <1>         and edx,1
   176                              <1> 
   177 000000F4 51                  <1>         push ecx ; Keep ecx and eax.
   178 000000F5 50                  <1>         push eax
   179                              <1> 
   180                              <1>         ; Print one digit:
   181 000000F6 52                  <1>         push edx ; Digit to be printed.
   182 000000F7 68[04000000]        <1>         push hex_ 
   183 000000FC E8(00000000)        <1>         call printf
   184 00000101 83C408              <1>         add esp,8
   185                              <1> 
   186 00000104 58                  <1>         pop eax ; Restore eax and ecx.
   187 00000105 59                  <1>         pop ecx
   188                              <1> 
   189 00000106 E2E5                <1>         loop .print_digit
   190 00000108 68[11000000]        <1>     push new_
   191 0000010D E8(00000000)        <1>     call printf
   192 00000112 83C404              <1>     add esp,4
   193 00000115 61                  <1>     popad
   194 00000116 C3                  <1>     ret
   195                                  
   196                                  global main
   197                                  extern exit 	
   198                                  
   199                                  ; ===============================================
   200                                  section .text
   201                                  
   202                                  main:
   203                                  
   204                                      
   205                                  
   206 00000117 6A00                    	push	0
   207 00000119 E8(00000000)            	call	exit
