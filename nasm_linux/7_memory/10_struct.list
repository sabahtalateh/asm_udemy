     1                                  ; Basic Assembly
     2                                  ; ==============
     3                                  BITS 32
     4                                  global main
     5                                  
     6                                  %include "training.s"
     7                              <1> BITS 32
     8                              <1> extern printf
     9                              <1> extern exit
    10                              <1> extern scanf
    11                              <1> extern read
    12                              <1> 
    13                              <1> section .data 
    14                              <1> 
    15                              <1> ;Formats for printf and strings needed throughout
    16 00000000 25780A00            <1> hex_new  db     "%x", 10, 0
    17 00000004 257800              <1> hex_     db "%x", 0
    18 00000007 256400              <1> dec_     db "%d", 0
    19 0000000A 25640A00            <1> dec_new  db     "%d", 10, 0
    20 0000000E 257300              <1> str_     db "%s", 0
    21 00000011 0A00                <1> new_     db "", 10, 0
    22 00000013 3D3D3D3D3D3D3D3D0A- <1> delim   db  "========",10,0
    23 0000001C 00                  <1>
    24                              <1> 
    25                              <1> section .text
    26                              <1> 
    27                              <1> print_ebx:
    28 00000000 60                  <1>     pushad
    29 00000001 53                  <1>     push    ebx
    30 00000002 68[00000000]        <1>     push    hex_new
    31 00000007 E8(00000000)        <1>     call    printf
    32 0000000C 83C408              <1>     add esp, 8
    33 0000000F 61                  <1>     popad
    34 00000010 C3                  <1>     ret
    35                              <1> 
    36                              <1> print_ebx_dec:
    37 00000011 60                  <1>     pushad
    38 00000012 53                  <1>     push    ebx
    39 00000013 68[0A000000]        <1>     push    dec_new
    40 00000018 E8(00000000)        <1>     call    printf
    41 0000001D 83C408              <1>     add esp, 8
    42 00000020 61                  <1>     popad
    43 00000021 C3                  <1>     ret
    44                              <1> 
    45                              <1> ;prints value in eax in hex saves all registers
    46                              <1> print_eax:
    47 00000022 60                  <1>     pushad
    48 00000023 50                  <1>     push    eax
    49 00000024 68[00000000]        <1>     push    hex_new
    50 00000029 E8(00000000)        <1>     call    printf
    51 0000002E 83C408              <1>     add esp, 8
    52 00000031 61                  <1>     popad
    53 00000032 C3                  <1>     ret
    54                              <1> 
    55                              <1> ;prints value in eax in hex saves all registers
    56                              <1> print_edx:
    57 00000033 60                  <1>     pushad
    58 00000034 52                  <1>     push    edx
    59 00000035 68[00000000]        <1>     push    hex_new
    60 0000003A E8(00000000)        <1>     call    printf
    61 0000003F 83C408              <1>     add esp, 8
    62 00000042 61                  <1>     popad
    63 00000043 C3                  <1>     ret
    64                              <1> 
    65                              <1> print_edi:
    66 00000044 60                  <1>     pushad
    67 00000045 57                  <1>     push    edi
    68 00000046 68[00000000]        <1>     push    hex_new
    69 0000004B E8(00000000)        <1>     call    printf
    70 00000050 83C408              <1>     add esp, 8
    71 00000053 61                  <1>     popad
    72 00000054 C3                  <1>     ret
    73                              <1>     
    74                              <1> ;prints value in eax in hex saves all registers
    75                              <1> print_eax_dec:
    76 00000055 60                  <1>     pushad
    77 00000056 50                  <1>     push    eax
    78 00000057 68[0A000000]        <1>     push    dec_new
    79 0000005C E8(00000000)        <1>     call    printf
    80 00000061 83C408              <1>     add esp, 8
    81 00000064 61                  <1>     popad
    82 00000065 C3                  <1>     ret
    83                              <1> 
    84                              <1> print_ecx:
    85 00000066 60                  <1>     pushad
    86 00000067 51                  <1>     push    ecx
    87 00000068 68[00000000]        <1>     push    hex_new
    88 0000006D E8(00000000)        <1>     call    printf
    89 00000072 83C408              <1>     add esp, 8
    90 00000075 61                  <1>     popad
    91 00000076 C3                  <1>     ret
    92                              <1> 
    93                              <1> ;prints line splitter saves all registers
    94                              <1> print_delimiter:
    95 00000077 60                  <1>     pushad
    96 00000078 B8[13000000]        <1>     mov eax, delim
    97 0000007D 50                  <1>     push    eax
    98 0000007E E8(00000000)        <1>     call    printf
    99 00000083 83C404              <1>     add esp,4
   100 00000086 61                  <1>     popad
   101 00000087 C3                  <1>     ret
   102                              <1> 
   103                              <1> ;read ecx bytes into edi null terminate it all registers saved 
   104                              <1> read_line:
   105 00000088 60                  <1>     pushad
   106 00000089 51                  <1>     push    ecx 
   107 0000008A 57                  <1>     push    edi 
   108 0000008B 6A00                <1>     push    0
   109 0000008D E8(00000000)        <1>     call    read
   110 00000092 83C40C              <1>     add esp, 12
   111 00000095 31D2                <1>     xor edx, edx
   112 00000097 C6040700            <1>     mov byte [edi+eax], 0
   113 0000009B 61                  <1>     popad
   114 0000009C C3                  <1>     ret
   115                              <1> 
   116                              <1> ; reads a hex value from stdin and stores it into eax ebx is not saved 
   117                              <1> read_hex:
   118 0000009D 55                  <1>     push    ebp
   119 0000009E 89E5                <1>     mov     ebp, esp
   120 000000A0 83EC04              <1>     sub     esp, 4
   121                              <1>     ; Keep important registers.
   122                              <1>     ; We can't use pusha here, because the result is inside eax.
   123 000000A3 53                  <1>     push    ebx
   124 000000A4 51                  <1>     push    ecx
   125 000000A5 52                  <1>     push    edx
   126                              <1> 
   127 000000A6 8D5DFC              <1>     lea     ebx, [ebp-4]
   128 000000A9 53                  <1>     push    ebx
   129 000000AA 68[04000000]        <1>     push    hex_
   130 000000AF E8(00000000)        <1>     call    scanf
   131 000000B4 83C408              <1>     add     esp, 8
   132 000000B7 8B03                <1>     mov     eax, [ebx]
   133                              <1> 
   134                              <1>     ; Restore registers:
   135 000000B9 5A                  <1>     pop     edx
   136 000000BA 59                  <1>     pop     ecx
   137 000000BB 5B                  <1>     pop     ebx
   138 000000BC C9                  <1>     leave
   139 000000BD C3                  <1>     ret
   140                              <1> 
   141                              <1> ; reads a hex value from stdin and stores it into eax ebx is not saved 
   142                              <1> read_dec:
   143 000000BE 55                  <1>     push    ebp
   144 000000BF 89E5                <1>     mov ebp, esp
   145 000000C1 83EC04              <1>     sub esp, 4
   146 000000C4 8D5DFC              <1>     lea ebx, [ebp-4]
   147 000000C7 60                  <1>     pusha
   148 000000C8 53                  <1>     push    ebx
   149 000000C9 68[07000000]        <1>     push    dec_
   150 000000CE E8(00000000)        <1>     call    scanf
   151 000000D3 83C408              <1>     add esp, 8
   152 000000D6 61                  <1>     popa
   153 000000D7 8B03                <1>     mov eax, [ebx]
   154 000000D9 C9                  <1>     leave
   155 000000DA C3                  <1>     ret
   156                              <1> 
   157                              <1> ;prints string pointed to by esi saves all registers
   158                              <1> print_str:
   159 000000DB 60                  <1>     pushad
   160 000000DC 56                  <1>     push    esi
   161 000000DD E8(00000000)        <1>     call    printf
   162 000000E2 83C404              <1>     add esp, 4
   163 000000E5 61                  <1>     popad
   164 000000E6 C3                  <1>     ret
   165                              <1> 
   166                              <1> ;prints eax in binary
   167                              <1> print_eax_binary:
   168 000000E7 60                  <1>     pushad
   169 000000E8 B920000000          <1>     mov ecx,32 ; We print 32 digits.
   170                              <1> 
   171                              <1> .print_digit:
   172 000000ED D1C0                <1>         rol eax,1
   173 000000EF 89C2                <1>         mov edx,eax
   174 000000F1 83E201              <1>         and edx,1
   175                              <1> 
   176 000000F4 51                  <1>         push ecx ; Keep ecx and eax.
   177 000000F5 50                  <1>         push eax
   178                              <1> 
   179                              <1>         ; Print one digit:
   180 000000F6 52                  <1>         push edx ; Digit to be printed.
   181 000000F7 68[04000000]        <1>         push hex_ 
   182 000000FC E8(00000000)        <1>         call printf
   183 00000101 83C408              <1>         add esp,8
   184                              <1> 
   185 00000104 58                  <1>         pop eax ; Restore eax and ecx.
   186 00000105 59                  <1>         pop ecx
   187                              <1> 
   188 00000106 E2E5                <1>         loop .print_digit
   189 00000108 68[11000000]        <1>     push new_
   190 0000010D E8(00000000)        <1>     call printf
   191 00000112 83C404              <1>     add esp,4
   192 00000115 61                  <1>     popad
   193 00000116 C3                  <1>     ret
   194                                  
   195                                  STRUC Point 
   196 00000000 <res 00000004>              .x: RESD 1 
   197 00000004 <res 00000004>              .y: RESD 1
   198                                      .size:
   199                                  ENDSTRUC
   200                                  
   201                                  section .bss
   202 00000000 <res 00000008>              p1: RESB Point.size
   203                                  
   204                                  section .data 
   205                                      p2: ISTRUC Point
   206 0000001D 03000000                    AT Point.x, DD 3
   207 00000021 04000000                    AT Point.y, DD 4
   208                                  IEND
   209                                  
   210                                  section .text
   211                                  
   212                                  main:
   213                                  
   214 00000117 C705[00000000]0100-         mov     dword [p1 + Point.x],  1
   215 0000011F 0000               
   216 00000121 C705[04000000]0200-         mov     dword [p1 + Point.y],  2
   217 00000129 0000               
   218                                      
   219 0000012B A1[00000000]                mov     eax, [p1 + Point.x]
   220 00000130 E8EDFEFFFF                  call    print_eax
   221                                  
   222 00000135 A1[04000000]                mov     eax, [p1 + Point.y]
   223 0000013A E8E3FEFFFF                  call    print_eax
   224                                  
   225 0000013F A1[1D000000]                mov     eax, [p2 + Point.x]
   226 00000144 E8D9FEFFFF                  call    print_eax
   227                                  
   228 00000149 A1[21000000]                mov     eax, [p2 + Point.y]
   229 0000014E E8CFFEFFFF                  call    print_eax
   230                                  
   231 00000153 A1[21000000]                mov     eax, [p2 + 4]
   232 00000158 E8C5FEFFFF                  call    print_eax
   233                                  
   234                                      ; Exit the process:
   235 0000015D 6A00                        push	0
   236 0000015F E8(00000000)                call	exit
