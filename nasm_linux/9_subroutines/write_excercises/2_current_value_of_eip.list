     1                                  ; Find yourself
     2                                  ;    
     3                                  ;    Write a program that finds the current value of EIP and prints it to the
     4                                  ;    console.
     5                                  ;
     6                                  ;    HINT: Use CALL.
     7                                  ;
     8                                  
     9                                  BITS 32
    10                                  global main
    11                                  extern exit
    12                                  
    13                                  %include "training.s"
    14                              <1> BITS 32
    15                              <1> extern printf
    16                              <1> extern exit
    17                              <1> extern scanf
    18                              <1> extern read
    19                              <1> 
    20                              <1> section .data 
    21                              <1> 
    22                              <1> ;Formats for printf and strings needed throughout
    23 00000000 25780A00            <1> hex_new  db     "%x", 10, 0
    24 00000004 257800              <1> hex_     db "%x", 0
    25 00000007 256400              <1> dec_     db "%d", 0
    26 0000000A 25640A00            <1> dec_new  db     "%d", 10, 0
    27 0000000E 257300              <1> str_     db "%s", 0
    28 00000011 0A00                <1> new_     db "", 10, 0
    29 00000013 3D3D3D3D3D3D3D3D0A- <1> delim   db  "========",10,0
    30 0000001C 00                  <1>
    31                              <1> 
    32                              <1> section .text
    33                              <1> 
    34                              <1> print_ebx:
    35 00000000 60                  <1>     pushad
    36 00000001 53                  <1>     push    ebx
    37 00000002 68[00000000]        <1>     push    hex_new
    38 00000007 E8(00000000)        <1>     call    printf
    39 0000000C 83C408              <1>     add esp, 8
    40 0000000F 61                  <1>     popad
    41 00000010 C3                  <1>     ret
    42                              <1> 
    43                              <1> print_ebx_dec:
    44 00000011 60                  <1>     pushad
    45 00000012 53                  <1>     push    ebx
    46 00000013 68[0A000000]        <1>     push    dec_new
    47 00000018 E8(00000000)        <1>     call    printf
    48 0000001D 83C408              <1>     add esp, 8
    49 00000020 61                  <1>     popad
    50 00000021 C3                  <1>     ret
    51                              <1> 
    52                              <1> ;prints value in eax in hex saves all registers
    53                              <1> print_eax:
    54 00000022 60                  <1>     pushad
    55 00000023 50                  <1>     push    eax
    56 00000024 68[00000000]        <1>     push    hex_new
    57 00000029 E8(00000000)        <1>     call    printf
    58 0000002E 83C408              <1>     add esp, 8
    59 00000031 61                  <1>     popad
    60 00000032 C3                  <1>     ret
    61                              <1> 
    62                              <1> ;prints value in eax in hex saves all registers
    63                              <1> print_edx:
    64 00000033 60                  <1>     pushad
    65 00000034 52                  <1>     push    edx
    66 00000035 68[00000000]        <1>     push    hex_new
    67 0000003A E8(00000000)        <1>     call    printf
    68 0000003F 83C408              <1>     add esp, 8
    69 00000042 61                  <1>     popad
    70 00000043 C3                  <1>     ret
    71                              <1> 
    72                              <1> print_edi:
    73 00000044 60                  <1>     pushad
    74 00000045 57                  <1>     push    edi
    75 00000046 68[00000000]        <1>     push    hex_new
    76 0000004B E8(00000000)        <1>     call    printf
    77 00000050 83C408              <1>     add esp, 8
    78 00000053 61                  <1>     popad
    79 00000054 C3                  <1>     ret
    80                              <1>     
    81                              <1> ;prints value in eax in hex saves all registers
    82                              <1> print_eax_dec:
    83 00000055 60                  <1>     pushad
    84 00000056 50                  <1>     push    eax
    85 00000057 68[0A000000]        <1>     push    dec_new
    86 0000005C E8(00000000)        <1>     call    printf
    87 00000061 83C408              <1>     add esp, 8
    88 00000064 61                  <1>     popad
    89 00000065 C3                  <1>     ret
    90                              <1> 
    91                              <1> print_ecx:
    92 00000066 60                  <1>     pushad
    93 00000067 51                  <1>     push    ecx
    94 00000068 68[00000000]        <1>     push    hex_new
    95 0000006D E8(00000000)        <1>     call    printf
    96 00000072 83C408              <1>     add esp, 8
    97 00000075 61                  <1>     popad
    98 00000076 C3                  <1>     ret
    99                              <1> 
   100                              <1> ;prints line splitter saves all registers
   101                              <1> print_delimiter:
   102 00000077 60                  <1>     pushad
   103 00000078 B8[13000000]        <1>     mov eax, delim
   104 0000007D 50                  <1>     push    eax
   105 0000007E E8(00000000)        <1>     call    printf
   106 00000083 83C404              <1>     add esp,4
   107 00000086 61                  <1>     popad
   108 00000087 C3                  <1>     ret
   109                              <1> 
   110                              <1> ;read ecx bytes into edi null terminate it all registers saved 
   111                              <1> read_line:
   112 00000088 60                  <1>     pushad
   113 00000089 51                  <1>     push    ecx 
   114 0000008A 57                  <1>     push    edi 
   115 0000008B 6A00                <1>     push    0
   116 0000008D E8(00000000)        <1>     call    read
   117 00000092 83C40C              <1>     add esp, 12
   118 00000095 31D2                <1>     xor edx, edx
   119 00000097 C6040700            <1>     mov byte [edi+eax], 0
   120 0000009B 61                  <1>     popad
   121 0000009C C3                  <1>     ret
   122                              <1> 
   123                              <1> ; reads a hex value from stdin and stores it into eax ebx is not saved 
   124                              <1> read_hex:
   125 0000009D 55                  <1>     push    ebp
   126 0000009E 89E5                <1>     mov     ebp, esp
   127 000000A0 83EC04              <1>     sub     esp, 4
   128                              <1>     ; Keep important registers.
   129                              <1>     ; We can't use pusha here, because the result is inside eax.
   130 000000A3 53                  <1>     push    ebx
   131 000000A4 51                  <1>     push    ecx
   132 000000A5 52                  <1>     push    edx
   133                              <1> 
   134 000000A6 8D5DFC              <1>     lea     ebx, [ebp-4]
   135 000000A9 53                  <1>     push    ebx
   136 000000AA 68[04000000]        <1>     push    hex_
   137 000000AF E8(00000000)        <1>     call    scanf
   138 000000B4 83C408              <1>     add     esp, 8
   139 000000B7 8B03                <1>     mov     eax, [ebx]
   140                              <1> 
   141                              <1>     ; Restore registers:
   142 000000B9 5A                  <1>     pop     edx
   143 000000BA 59                  <1>     pop     ecx
   144 000000BB 5B                  <1>     pop     ebx
   145 000000BC C9                  <1>     leave
   146 000000BD C3                  <1>     ret
   147                              <1> 
   148                              <1> ; reads a hex value from stdin and stores it into eax ebx is not saved 
   149                              <1> read_dec:
   150 000000BE 55                  <1>     push    ebp
   151 000000BF 89E5                <1>     mov ebp, esp
   152 000000C1 83EC04              <1>     sub esp, 4
   153 000000C4 8D5DFC              <1>     lea ebx, [ebp-4]
   154 000000C7 60                  <1>     pusha
   155 000000C8 53                  <1>     push    ebx
   156 000000C9 68[07000000]        <1>     push    dec_
   157 000000CE E8(00000000)        <1>     call    scanf
   158 000000D3 83C408              <1>     add esp, 8
   159 000000D6 61                  <1>     popa
   160 000000D7 8B03                <1>     mov eax, [ebx]
   161 000000D9 C9                  <1>     leave
   162 000000DA C3                  <1>     ret
   163                              <1> 
   164                              <1> ;prints string pointed to by esi saves all registers
   165                              <1> print_str:
   166 000000DB 60                  <1>     pushad
   167 000000DC 56                  <1>     push    esi
   168 000000DD E8(00000000)        <1>     call    printf
   169 000000E2 83C404              <1>     add esp, 4
   170 000000E5 61                  <1>     popad
   171 000000E6 C3                  <1>     ret
   172                              <1> 
   173                              <1> ;prints eax in binary
   174                              <1> print_eax_binary:
   175 000000E7 60                  <1>     pushad
   176 000000E8 B920000000          <1>     mov ecx,32 ; We print 32 digits.
   177                              <1> 
   178                              <1> .print_digit:
   179 000000ED D1C0                <1>         rol eax,1
   180 000000EF 89C2                <1>         mov edx,eax
   181 000000F1 83E201              <1>         and edx,1
   182                              <1> 
   183 000000F4 51                  <1>         push ecx ; Keep ecx and eax.
   184 000000F5 50                  <1>         push eax
   185                              <1> 
   186                              <1>         ; Print one digit:
   187 000000F6 52                  <1>         push edx ; Digit to be printed.
   188 000000F7 68[04000000]        <1>         push hex_ 
   189 000000FC E8(00000000)        <1>         call printf
   190 00000101 83C408              <1>         add esp,8
   191                              <1> 
   192 00000104 58                  <1>         pop eax ; Restore eax and ecx.
   193 00000105 59                  <1>         pop ecx
   194                              <1> 
   195 00000106 E2E5                <1>         loop .print_digit
   196 00000108 68[11000000]        <1>     push new_
   197 0000010D E8(00000000)        <1>     call printf
   198 00000112 83C404              <1>     add esp,4
   199 00000115 61                  <1>     popad
   200 00000116 C3                  <1>     ret
   201                                  
   202                                  section .text
   203                                  
   204                                  main:
   205                                  
   206 00000117 E807000000                  call    print_eip
   207                                  
   208 0000011C 6A00                        push    0
   209 0000011E E8(00000000)                call    exit
   210                                  
   211                                  print_eip:
   212 00000123 58                          pop     eax
   213 00000124 E8F9FEFFFF                  call    print_eax
   214 00000129 50                          push    eax
   215                                  
   216                                  
   217 0000012A C3                          ret
